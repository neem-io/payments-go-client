/*
Payments

Enable your customers to make intrabank or IBFT payments through our payment APIs.

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// PaymentsApiService PaymentsApi service
type PaymentsApiService service

type ApiInitiateWalletPaymentRequest struct {
	ctx context.Context
	ApiService *PaymentsApiService
	walletId int32
	xNeemId *string
	xNeemPartnerId *int32
	body *map[string]interface{}
}

func (r ApiInitiateWalletPaymentRequest) XNeemId(xNeemId string) ApiInitiateWalletPaymentRequest {
	r.xNeemId = &xNeemId
	return r
}

func (r ApiInitiateWalletPaymentRequest) XNeemPartnerId(xNeemPartnerId int32) ApiInitiateWalletPaymentRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiInitiateWalletPaymentRequest) Body(body map[string]interface{}) ApiInitiateWalletPaymentRequest {
	r.body = &body
	return r
}

func (r ApiInitiateWalletPaymentRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.InitiateWalletPaymentExecute(r)
}

/*
InitiateWalletPayment Make Payments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiInitiateWalletPaymentRequest
*/
func (a *PaymentsApiService) InitiateWalletPayment(ctx context.Context, walletId int32) ApiInitiateWalletPaymentRequest {
	return ApiInitiateWalletPaymentRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PaymentsApiService) InitiateWalletPaymentExecute(r ApiInitiateWalletPaymentRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsApiService.InitiateWalletPayment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/payment-initiate/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemId != nil {
		localVarHeaderParams["X-Neem-Id"] = parameterToString(*r.xNeemId, "")
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWalletBillInquiryRequest struct {
	ctx context.Context
	ApiService *PaymentsApiService
	walletId string
	xNeemId *string
	xNeemPartnerId *int32
	endToEndIdentification *string
	productId *string
	consumerNumber *string
}

func (r ApiWalletBillInquiryRequest) XNeemId(xNeemId string) ApiWalletBillInquiryRequest {
	r.xNeemId = &xNeemId
	return r
}

func (r ApiWalletBillInquiryRequest) XNeemPartnerId(xNeemPartnerId int32) ApiWalletBillInquiryRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiWalletBillInquiryRequest) EndToEndIdentification(endToEndIdentification string) ApiWalletBillInquiryRequest {
	r.endToEndIdentification = &endToEndIdentification
	return r
}

func (r ApiWalletBillInquiryRequest) ProductId(productId string) ApiWalletBillInquiryRequest {
	r.productId = &productId
	return r
}

func (r ApiWalletBillInquiryRequest) ConsumerNumber(consumerNumber string) ApiWalletBillInquiryRequest {
	r.consumerNumber = &consumerNumber
	return r
}

func (r ApiWalletBillInquiryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.WalletBillInquiryExecute(r)
}

/*
WalletBillInquiry Bill Inquiry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiWalletBillInquiryRequest
*/
func (a *PaymentsApiService) WalletBillInquiry(ctx context.Context, walletId string) ApiWalletBillInquiryRequest {
	return ApiWalletBillInquiryRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PaymentsApiService) WalletBillInquiryExecute(r ApiWalletBillInquiryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsApiService.WalletBillInquiry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/bill/inquiry/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endToEndIdentification != nil {
		localVarQueryParams.Add("endToEndIdentification", parameterToString(*r.endToEndIdentification, ""))
	}
	if r.productId != nil {
		localVarQueryParams.Add("productId", parameterToString(*r.productId, ""))
	}
	if r.consumerNumber != nil {
		localVarQueryParams.Add("consumerNumber", parameterToString(*r.consumerNumber, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemId != nil {
		localVarHeaderParams["X-Neem-Id"] = parameterToString(*r.xNeemId, "")
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWalletBillPaymentRequest struct {
	ctx context.Context
	ApiService *PaymentsApiService
	walletId int32
	xNeemId *string
	xNeemPartnerId *int32
	body *map[string]interface{}
}

func (r ApiWalletBillPaymentRequest) XNeemId(xNeemId string) ApiWalletBillPaymentRequest {
	r.xNeemId = &xNeemId
	return r
}

func (r ApiWalletBillPaymentRequest) XNeemPartnerId(xNeemPartnerId int32) ApiWalletBillPaymentRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiWalletBillPaymentRequest) Body(body map[string]interface{}) ApiWalletBillPaymentRequest {
	r.body = &body
	return r
}

func (r ApiWalletBillPaymentRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.WalletBillPaymentExecute(r)
}

/*
WalletBillPayment Bill Payment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiWalletBillPaymentRequest
*/
func (a *PaymentsApiService) WalletBillPayment(ctx context.Context, walletId int32) ApiWalletBillPaymentRequest {
	return ApiWalletBillPaymentRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PaymentsApiService) WalletBillPaymentExecute(r ApiWalletBillPaymentRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsApiService.WalletBillPayment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/bill/payment/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemId != nil {
		localVarHeaderParams["X-Neem-Id"] = parameterToString(*r.xNeemId, "")
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWalletPaymentInquiryRequest struct {
	ctx context.Context
	ApiService *PaymentsApiService
	walletId string
	xNeemId *string
	xNeemPartnerId *int32
	endToEndIdentification *string
	paymentScheme *string
	amount *string
	currency *string
	creditorIdentification *string
	creditorName *string
	creditorInstitutionIdentification *string
	creditorSecondaryIdentification *string
	extendedProperties *[]map[string]interface{}
}

func (r ApiWalletPaymentInquiryRequest) XNeemId(xNeemId string) ApiWalletPaymentInquiryRequest {
	r.xNeemId = &xNeemId
	return r
}

func (r ApiWalletPaymentInquiryRequest) XNeemPartnerId(xNeemPartnerId int32) ApiWalletPaymentInquiryRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiWalletPaymentInquiryRequest) EndToEndIdentification(endToEndIdentification string) ApiWalletPaymentInquiryRequest {
	r.endToEndIdentification = &endToEndIdentification
	return r
}

func (r ApiWalletPaymentInquiryRequest) PaymentScheme(paymentScheme string) ApiWalletPaymentInquiryRequest {
	r.paymentScheme = &paymentScheme
	return r
}

func (r ApiWalletPaymentInquiryRequest) Amount(amount string) ApiWalletPaymentInquiryRequest {
	r.amount = &amount
	return r
}

func (r ApiWalletPaymentInquiryRequest) Currency(currency string) ApiWalletPaymentInquiryRequest {
	r.currency = &currency
	return r
}

func (r ApiWalletPaymentInquiryRequest) CreditorIdentification(creditorIdentification string) ApiWalletPaymentInquiryRequest {
	r.creditorIdentification = &creditorIdentification
	return r
}

func (r ApiWalletPaymentInquiryRequest) CreditorName(creditorName string) ApiWalletPaymentInquiryRequest {
	r.creditorName = &creditorName
	return r
}

func (r ApiWalletPaymentInquiryRequest) CreditorInstitutionIdentification(creditorInstitutionIdentification string) ApiWalletPaymentInquiryRequest {
	r.creditorInstitutionIdentification = &creditorInstitutionIdentification
	return r
}

func (r ApiWalletPaymentInquiryRequest) CreditorSecondaryIdentification(creditorSecondaryIdentification string) ApiWalletPaymentInquiryRequest {
	r.creditorSecondaryIdentification = &creditorSecondaryIdentification
	return r
}

func (r ApiWalletPaymentInquiryRequest) ExtendedProperties(extendedProperties []map[string]interface{}) ApiWalletPaymentInquiryRequest {
	r.extendedProperties = &extendedProperties
	return r
}

func (r ApiWalletPaymentInquiryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.WalletPaymentInquiryExecute(r)
}

/*
WalletPaymentInquiry Payment Inquiry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiWalletPaymentInquiryRequest
*/
func (a *PaymentsApiService) WalletPaymentInquiry(ctx context.Context, walletId string) ApiWalletPaymentInquiryRequest {
	return ApiWalletPaymentInquiryRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *PaymentsApiService) WalletPaymentInquiryExecute(r ApiWalletPaymentInquiryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsApiService.WalletPaymentInquiry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/payment-inquiry/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endToEndIdentification != nil {
		localVarQueryParams.Add("endToEndIdentification", parameterToString(*r.endToEndIdentification, ""))
	}
	if r.paymentScheme != nil {
		localVarQueryParams.Add("paymentScheme", parameterToString(*r.paymentScheme, ""))
	}
	if r.amount != nil {
		localVarQueryParams.Add("amount", parameterToString(*r.amount, ""))
	}
	if r.currency != nil {
		localVarQueryParams.Add("currency", parameterToString(*r.currency, ""))
	}
	if r.creditorIdentification != nil {
		localVarQueryParams.Add("creditorIdentification", parameterToString(*r.creditorIdentification, ""))
	}
	if r.creditorName != nil {
		localVarQueryParams.Add("creditorName", parameterToString(*r.creditorName, ""))
	}
	if r.creditorInstitutionIdentification != nil {
		localVarQueryParams.Add("creditorInstitutionIdentification", parameterToString(*r.creditorInstitutionIdentification, ""))
	}
	if r.creditorSecondaryIdentification != nil {
		localVarQueryParams.Add("creditorSecondaryIdentification", parameterToString(*r.creditorSecondaryIdentification, ""))
	}
	if r.extendedProperties != nil {
		t := *r.extendedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("extendedProperties", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("extendedProperties", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemId != nil {
		localVarHeaderParams["X-Neem-Id"] = parameterToString(*r.xNeemId, "")
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
